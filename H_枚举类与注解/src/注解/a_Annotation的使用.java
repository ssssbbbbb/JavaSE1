package 注解;

/**
 *  注解的使用
 *
 *      一、理解Annotation
 *      1、从JDK 5.0开始，Java增加了对元数据(MetaData)的支持，也就是Annotation(注解)
 *
 *      2、Annotation其实就是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过使用Annotation，程序员
 *      可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。
 *
 *      3、Annotation可以像修饰符一样被使用，可用于修饰包，类，构造器，方法，成员变量，参数，局部变量的声明，这些信息被保存在
 *      Annotation的“name=value”对中。
 *
 *      4、在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置
 *      应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。
 *      未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有
 *      一部分也是基于注解的了，注解是一种趋势， 一定程度上可以说：框架=注解+反射+设计模式。
 *
 *      二、Annotation使用示例
 *      示例一：生成在文档里的相关注释
 *      示例二：在编译时进行格式检查(JDK内置的三个基本注解)
 *              ① @Override:限定重写父类方法，该注解只能用于方法
 *              ② @Deprecated:用于表示所修饰的元素(类，方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择（在Date类中就有）
 *              ③ @SuppressWarnings:抑制编译器警告
 *
 *      示例三：跟踪代码依赖性，实现替代配置文件功能
 *
 *      三、如何自定义注解
 */
public class a_Annotation的使用 {
}
