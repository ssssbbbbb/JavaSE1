/**
 *  线程的安全问题
 *      1、问题：当某个线程操作车票的过程中，尚未操作完成时，其它线程也参与进来操作车票,导致车票发生错误和重票。
 *      2、如何解决：当一个线程a在操作ticket（车票）的时候，其它线程不能参与进来。直到线程a操作完ticket时，其它线程才可以开始操作ticket。
 *          这种情况即使线程a出现了阻塞，也不能被改变。
 *      ================================================================================================================
 *      3、在Java中，我们通过同步机制，来解决线程的安全问题。
 *          方式一：同步代码块
 *              synchronized(同步监视器){
 *                  需要被同步的代码
 *              }
 *          说明:  1、操作共享数据的代码，即为需要被同步的代码 ---> 不能包含多了不应该同步的代码，也不能包含少了同步的代码
 *                2、共享数据：多个线程共同操作的变量。比如：ticket（车票）就是共享数据
 *                3、同步监视器，俗称：锁  ———— 任何一个类的对象都可以作为锁
 *                      要求：多个线程必须要共用同一把锁。
 *          ------------------------------------------------------------------------------
 *          方式二：同步方法
 *              如果操作共享数据的代码完整的声明在一个方法中，我们可以考虑使用this充当同步监视器
 *
 *              同步方法总结
 *              1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。
 *              2. 非静态的同步方法，同步监视器是：this
 *                  静态的同步方法，同步监视器是：当前类本身
 *      ================================================================================================================
 *      4、同步的方式，解决了线程的安全问题  ---  好处
 *         操作同步代码时，只能有一个线程参与，其它线程等待，这相当于是一个单线程的过程。使程序运行速度变慢了  ---  局限性
 */
// 此处是：实现Runnable接口创建线程时出现的线程安全问题，使用同步代码块解决，
// 解决继承Thread方式创建线程时出现线程安全问题的测试程序在 --- g_3线程同步安全问题解决.java
public class g_2线程同步安全问题 {
    public static void main(String[] args) {
        ThreadTest_g tg = new ThreadTest_g();

        Thread t1 = new Thread(tg);
        Thread t2 = new Thread(tg);
        Thread t3 = new Thread(tg);

        t1.setName("窗口一");
        t2.setName("窗口二");
        t3.setName("窗口三");

        t1.start();
        t2.start();
        t3.start();
    }
}

/**
 *  解决线程安全问题方法
 *  使用synchronized()方法同步代码块
 *  使用Object类创建对象 obj对象为锁
 *
 */
class ThreadTest_g implements Runnable {
    private int ticket = 100;
    Object obj = new Object();

    @Override
    public void run() {

        while (true) {
            synchronized (obj) {
                if (ticket > 0) {
                    // 故意增加的代码，用于增加线程安全问题出现的机率
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    System.out.println(Thread.currentThread().getName() + ":卖票，票号为:" + ticket);
                    ticket--;

                } else {
                    break;
                }
            }
       }

    }
}
